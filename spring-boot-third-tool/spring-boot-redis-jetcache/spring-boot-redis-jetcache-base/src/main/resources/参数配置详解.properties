
# 默认值false, 是否将 areaName 作为远程缓存key前缀
jetcache.areaInCacheName=false
# local
# 可选 linkedhashmap,caffeine
jetcache.local.default.type=caffeine
# 指定KEY的转换方式, 可选 fastjson2,fastjson,jackson
jetcache.local.default.keyConvertor=fastjson
# 本地缓存的最大元素数量, 默认:100, 注解可以通过 localLimit = 1000 来设定
jetcache.local.default.limit=1000
# redis:jedis, redis.lettuce:lettuce
jetcache.remote.default.type=redis
#  指定KEY的转换方式, 可选 fastjson2,fastjson,jackson
jetcache.remote.default.keyConvertor=fastjson
# 可选 java,kryo,kryo5
jetcache.remote.default.valueEncoder=java
# 可选 java,kryo,kryo5
jetcache.remote.default.valueDecoder=java
# 最小空闲连接数
jetcache.remote.default.poolConfig.minIdle = 0
# 最大空闲连接数
jetcache.remote.default.poolConfig.maxIdle = 50
# 允许最大连接数
jetcache.remote.default.poolConfig.maxTotal = 100
# 连接池用完用时，请求最大等待时间
jetcache.remote.default.poolConfig.maxWait = 10000


@CacheRefresh
    refresh: 刷新时间间隔
    refreshLockTimeout: 类型为 BOTH/REMOTE 的缓存刷新时，远程缓存放置一个分布式锁，此配置指定该锁的超时时间
    stopRefreshAfterLastAccess: 指定多久未访问后停止自动刷新。 注意:不指定则会一直刷新, 建议设置, 否则内存消耗太大

@CachePenetrationProtect
    当缓存访问【未命中】的情况下,对并发进行的加载行为进行保护.
    当前版本实现的是单JVM内的保护，即同一个JVM中同一个key只有一个线程去加载，其它线程等待结果

@Cached
    cacheType:
        1.如果 CacheType.LOCAL ,那么多个节点会重复刷新。
        2.如果 CacheType.REMOTE ,通过在远程缓存中的分布式锁'_#TS#',保证一个周期内只有一个节点执行了刷新操作.
        3.如果 CacheType.BOTH ,即两级缓存,通过在远程缓存中的分布式锁,保证一个周期内只有一个节点执行了刷新操作.
    cacheNullValue: 是否缓存 NULL 值
    expire: 远程过期时间
    localExpire: 本地过期时间, 应该小于远程过期时间, 只对CacheType.LOCAL和CacheType.BOTH有效



# lettuce
# lettuce在集群模式下，与jedis不同，它并没有对所有Redis节点创建空闲连接数。
# 例如: min-ide=10, 在未使用lettuce前, 只有一个健康检查连接数, 首次请求后,会初始化10个,只会对集群某一个节点创建10+1个链接。
# 连接池最小空闲连接数.仅在它和time-between-eviction-runs都为正时有效
spring.redis.lettuce.pool.min-idle = 2
# 连接池可以分配的最大连接数。使用负值表示无限制
spring.redis.lettuce.pool.max-idle = 8
# 连接池可以分配的最大连接数。使用负值表示无限制
spring.redis.lettuce.pool.max-active = 8
# 空闲对象逐出器线程的运行间隔时间。当为正值时，空闲对象逐出器线程启动，否则不执行空闲对象逐出。单位毫秒
spring.redis.lettuce.pool.time-between-eviction-runs = 60000
# 连接池资源耗尽时，连接尝试分配阻塞时间,超时即抛出异常。使用负值无限期阻塞。
spring.redis.lettuce.pool.max-wait
# 如果一定要池化使用（性能好像会下降:）
# 原因参考: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.setShareNativeConnection
# ...
#   if (redisConnectionFactory instanceof LettuceConnectionFactory) {
#    LettuceConnectionFactory lettuceConnectionFactory = (LettuceConnectionFactory) redisConnectionFactory;
#    RedisClusterConfiguration clusterConfiguration = lettuceConnectionFactory.getClusterConfiguration();
#    if (null != clusterConfiguration && !CollectionUtils.isEmpty(clusterConfiguration.getClusterNodes())) {
#       // 集群模式, lettuce 一定要关闭共享连接，否则连接池将不会生效
#       lettuceConnectionFactory.setShareNativeConnection(false);
#    }
#   }
# ...



# jedis
